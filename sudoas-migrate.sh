#!/bin/sh
# sudoas-migrate.sh
# POSIX-compliant migration helper to move from sudo -> doas + fudo on Arch.
# Must be run as root. Usage: ./sudoas-migrate.sh <your-nonroot-username>
# Review before running.

set -u

err() {
    printf '%s\n' "$1" >&2
}

confirm_default_yes() {
    printf '%s [Y/n] ' "$1"
    if ! IFS= read -r ans; then
        return 1
    fi
    case "$ans" in
        "" | [Yy]* ) return 0 ;;
        * ) return 1 ;;
    esac
}

confirm_default_no() {
    printf '%s [y/N] ' "$1"
    if ! IFS= read -r ans; then
        return 1
    fi
    case "$ans" in
        [Yy]* ) return 0 ;;
        * ) return 1 ;;
    esac
}

if [ "$(id -u)" != "0" ]; then
    err "This script must be run as root (via su / sudo / doas). Exiting."
    exit 1
fi

if [ $# -lt 1 ]; then
    err "Usage: $0 <your-nonroot-username>"
    err "You must pass your own username (non-root user account in the wheel group) as an argument."
    exit 1
fi

NORMAL_USER="$1"

if ! getent passwd "$NORMAL_USER" >/dev/null 2>&1; then
    err "User '$NORMAL_USER' not found in /etc/passwd. Aborting."
    exit 1
fi

if ! command -v sudo >/dev/null 2>&1; then
    err "sudo is not installed. The script is designed to migrate you from sudo to a sudo-doas hybrid or pure doas setup. It requires sudo to function."
    exit 1
fi

printf 'Validating sudo credentials for user %s...\n' "$NORMAL_USER"
su - "$NORMAL_USER" -c "sudo -v" || {
    err "Failed to validate sudo credentials for $NORMAL_USER. Exiting."
    exit 1
}

AUR_HELPER=""
if command -v yay >/dev/null 2>&1; then
    AUR_HELPER="yay"
elif command -v paru >/dev/null 2>&1; then
    AUR_HELPER="paru"
else
    err "Neither 'yay' nor 'paru' found. This script requires an AUR helper. Exiting."
    exit 1
fi

printf 'Detected AUR helper: %s\n' "$AUR_HELPER"
printf 'This script will install opendoas (or opendoas-retry), useful doas tooling, and optionally replace sudo, provide patched devtools and fish shell integration.\n'
printf 'All AUR operations will be executed as user: %s\n' "$NORMAL_USER"
printf 'Proceed? '
if ! IFS= read -r proceed; then
    err "Input error. Aborting."
    exit 1
fi
case "$proceed" in
    "" | [Yy]* ) ;;
    * ) printf 'Aborted by user.\n'; exit 0 ;;
esac

run_as_user() {
    USERNAME="$1"
    shift
    CMD="$*"
    su - "$USERNAME" -c "$CMD"
    return $?
}

run_as_root() {
    "$@"
}

if confirm_default_yes "Do you want opendoas to retry after password prompt failures (install opendoas-retry from AUR)?"; then
    WANT_RETRY=1
else
    WANT_RETRY=0
fi

if [ "$WANT_RETRY" -eq 1 ]; then
    printf 'Installing opendoas-retry from AUR via %s as user %s\n' "$AUR_HELPER" "$NORMAL_USER"
    if ! run_as_user "$NORMAL_USER" "$AUR_HELPER -S --needed opendoas-retry --noconfirm"; then
        err "Failed to install opendoas-retry. Aborting."
        exit 1
    fi
else
    printf 'Installing opendoas from official repos via pacman\n'
    if ! run_as_root pacman -S --needed opendoas --noconfirm; then
        err "Failed to install opendoas. Aborting."
        exit 1
    fi
fi

printf 'Installing vidoas and doasedit-alternative from AUR via %s as user %s\n' "$AUR_HELPER" "$NORMAL_USER"
if ! run_as_user "$NORMAL_USER" "$AUR_HELPER -S --needed vidoas doasedit-alternative --noconfirm"; then
    err "Failed to install doas tooling. Aborting."
    exit 1
fi

DOAS_CONF="/etc/doas.conf"
if [ ! -f "$DOAS_CONF" ]; then
    printf '\n/etc/doas.conf not found. Creating template.\n'
    run_as_root sh -c 'cat > /etc/doas.conf <<'EOF'
## Simple doas.conf automatically generated by sudoas-migrate.sh
## Inspect and edit this file to suit your security requirements.
## Some examples are provided below.
#
# Permit members of the wheel group to perform actions as root.
# permit :wheel
#
# Permit the wheel group to perform actions as root without having to enter a password.
# permit nopass :wheel
#
# Permit user alice to run commands as a root user.
# permit alice as root
#
# Permit user bob to run programs as root, maintaining environment variables.
# Useful for GUI applications.
# permit keepenv bob as root
#
# Permit user cindy to run only the package manager as root to perform system upgrades.
# permit cindy as root cmd pacman args -Syu
#
# Deny user josh from using the nano editor as root.
# deny josh as root cmd nano
#
#
## For now, we enable a sudo-like base configuration:
#
# Members of the wheel group can perform actions as root or other users.
# They will keep their environment variables and reauthentication will not require a password for a small amount of time.
permit keepenv persist :wheel
# In case you want authentication to require a password every time, remove persist from the above line.
#
# Same without keeping environment variables, a more secure approach that might break some programs designed for sudo.
# permit persist :wheel
#
# Permit root to run doas without password authentication.
permit nopass keepenv root
EOF'
    chown root:root "$DOAS_CONF" 2>/dev/null || true
    chmod 0644 "$DOAS_CONF" 2>/dev/null || true
    printf 'A minimal /etc/doas.conf was created and owned by root:root. Inspect and edit it using vidoas.\n'
else
    printf '/etc/doas.conf exists; leaving it intact.\n'
fi

if command -v doas >/dev/null 2>&1; then
    printf 'Testing doas: doas whoami -> '
    if doas whoami >/dev/null 2>&1; then
        printf 'doas appears to be functional.\n'
    else
        err 'doas test failed. Check /etc/doas.conf to ensure the provided user or wheel group is permitted.'
    fi
else
    printf 'Note: doas executable not found in PATH. Something might have gone wrong, manual installation may be required.\n'
fi

if confirm_default_no "Do you want to install devtools patched for doas (devtools-doas from AUR)?"; then
    printf 'Checking installed devtools package (repo) ...\n'
    if pacman -Qi devtools >/dev/null 2>&1; then
        printf 'devtools is installed. Will remove it (configs preserved) before installing devtools-doas.\n'
        if confirm_default_yes "Proceed to remove devtools (pacman -R devtools)?"; then
            run_as_root pacman -R --noconfirm devtools || err "Failed to remove devtools. Please remove it manually if needed."
        else
            printf 'Skipping removal of devtools; attempting to install devtools-doas anyway.\n'
        fi
    else
        printf 'devtools not installed; will install devtools-doas from AUR.\n'
    fi

    printf 'Installing devtools-doas from AUR via %s as user %s\n' "$AUR_HELPER" "$NORMAL_USER"
    if ! run_as_user "$NORMAL_USER" "$AUR_HELPER -S --needed devtools-doas --noconfirm"; then
        err "Failed to install devtools-doas via $AUR_HELPER. Please build/install it manually as $NORMAL_USER."
    fi
fi

USER_SHELL=$(getent passwd "$NORMAL_USER" | awk -F: '{print $7}' 2>/dev/null || echo '')
[ -z "$USER_SHELL" ] && USER_SHELL="$SHELL"

RC_FILE=""
case "$USER_SHELL" in
    */zsh) RC_FILE="/home/$NORMAL_USER/.zshrc" ;;
    */bash) RC_FILE="/home/$NORMAL_USER/.bashrc" ;;
    */fish) RC_FILE="/home/$NORMAL_USER/.config/fish/config.fish" ;;
    *)
        if [ -f "/home/$NORMAL_USER/.zshrc" ]; then
            RC_FILE="/home/$NORMAL_USER/.zshrc"
        elif [ -f "/home/$NORMAL_USER/.bashrc" ]; then
            RC_FILE="/home/$NORMAL_USER/.bashrc"
        else
            RC_FILE="/home/$NORMAL_USER/.profile"
        fi
        ;;
esac

if echo "$USER_SHELL" | grep -q 'fish'; then
    printf 'Detected fish shell for %s - installing fish-opendoas-git from AUR\n' "$NORMAL_USER"
    run_as_user "$NORMAL_USER" "$AUR_HELPER -S --needed fish-opendoas-git --noconfirm" || \
        printf 'Failed to install fish-opendoas-git. You may install manually if desired.\n'
fi

if confirm_default_no "Do you want to replace sudo on the system by installing fudo-git (AUR)?"; then
    printf '\nIMPORTANT: When your AUR helper prompts that fudo-git will replace sudo, accept it.\n'
    printf 'Press ENTER to proceed with installing fudo-git via %s as user %s.' "$AUR_HELPER" "$NORMAL_USER"
    IFS= read -r _

    if ! run_as_user "$NORMAL_USER" "$AUR_HELPER -S --needed fudo-git"; then
        err "Failed to install fudo-git. Sudo will not be replaced. Skipping shell RC modifications."
    else
        printf '\nAppending compatibility lines to %s (owned by %s)\n' "$RC_FILE" "$NORMAL_USER"

        if echo "$RC_FILE" | grep -q 'config.fish' 2>/dev/null; then
            run_as_root sh -c "cat >> \"$RC_FILE\" <<'EOF'
set -x FUDO_HIDE 1
function sudoedit --description 'compat sudoedit -> doasedit'
    doasedit \$argv
end
function visudo --description 'compat visudo -> vidoas'
    vidoas \$argv
end
EOF"
        else
            run_as_root sh -c "cat >> \"$RC_FILE\" <<'EOF'
export FUDO_HIDE=1
alias sudoedit='doasedit'
alias visudo='vidoas'
EOF"
        fi

        chown "$NORMAL_USER":"$NORMAL_USER" "$RC_FILE" 2>/dev/null || true
        printf '\nAppended compatibility lines. To pick them up, %s should restart their shell or source %s\n' "$NORMAL_USER" "$RC_FILE"
    fi
fi

printf '\nMigration script finished. Please inspect /etc/doas.conf and the shell rc file changes.\n'
printf 'Useful commands to check:\n'
printf '  vidoas   - safely edit files owned by root\n'
printf '  doasedit - safely edit doas.conf\n'

exit 0
